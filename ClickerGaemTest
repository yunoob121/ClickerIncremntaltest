<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Colorful Clicker Game with Animations</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
            font-family: 'Arial', sans-serif;
            flex-direction: column;
            overflow: hidden;
        }

        .container {
            text-align: center;
            position: relative;
        }

        .click-button {
            padding: 20px 40px;
            font-size: 24px;
            background: linear-gradient(45deg, #ff6f61, #ffcc00);
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s ease, background 0.2s ease;
            margin-bottom: 20px;
        }

        .click-button:hover {
            transform: scale(1.1);
            background: linear-gradient(45deg, #ffcc00, #ff6f61);
        }

        .score {
            margin-top: 20px;
            font-size: 32px;
            color: #333;
            animation: fadeIn 1s ease-out;
        }

        @keyframes fadeIn {
            0% { opacity: 0; }
            100% { opacity: 1; }
        }

        .number {
            position: absolute;
            font-size: 24px;
            color: #ff6f61;
            font-weight: bold;
            opacity: 1;
            transform: translate(-50%, -50%);
            animation: floatUp 1.5s ease-out forwards;
        }

        @keyframes floatUp {
            0% {
                transform: translate(-50%, -50%) translateY(0);
                opacity: 1;
            }
            100% {
                transform: translate(-50%, -150%) translateY(-100px);
                opacity: 0;
            }
        }

        .leaderboard {
            margin-top: 40px;
            font-size: 18px;
            color: #333;
            animation: fadeIn 1s ease-out;
        }

        .leaderboard h2 {
            margin-bottom: 10px;
            color: #ff6f61;
        }

        .leaderboard ul {
            list-style-type: none;
            padding: 0;
        }

        .leaderboard li {
            padding: 5px 0;
        }

        .leaderboard li span {
            font-weight: bold;
            color: #ffcc00;
        }

        .leaderboard li:nth-child(odd) {
            background-color: #f0f0f0;
        }

        .leaderboard li:nth-child(even) {
            background-color: #f7f7f7;
        }

        button {
            margin: 5px;
            padding: 10px 20px;
            font-size: 18px;
            border-radius: 8px;
            border: none;
            cursor: pointer;
            background-color: #ff6f61;
            color: white;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: transform 0.2s ease, background 0.2s ease;
        }

        button:hover {
            transform: scale(1.05);
            background-color: #ffcc00;
        }

        button:active {
            transform: scale(1);
        }
    </style>
</head>
<body>
    <div class="container">
        <button class="click-button" id="clickButton" onclick="clickButton()">Click Me!</button>
        <div class="score" id="score">Score: 0</div>

        <div class="leaderboard">
            <h2>Leaderboard</h2>
            <ul id="leaderboardList">
                <li>Loading...</li>
            </ul>
        </div>

        <div>
            <button onclick="saveGame()">Save Game</button>
            <button onclick="loadGame()">Load Game</button>
        </div>
    </div>

    <script>
        let score = 0;
        let lastSavedTime = new Date().getTime(); // Track last save time

        // Function for the click action
        function clickButton() {
            // Increase score
            score++;
            updateScore();

            // Create a floating number that appears above the button
            createFloatingNumber(score);
        }

        // Function to update the score displayed on the screen
        function updateScore() {
            document.getElementById("score").innerText = "Score: " + score;
        }

        // Function to create a floating number above the button
        function createFloatingNumber(number) {
            const floatingNumber = document.createElement("div");
            floatingNumber.classList.add("number");
            floatingNumber.innerText = `+1`;

            // Position the floating number at the center of the button
            const button = document.getElementById("clickButton");
            const buttonRect = button.getBoundingClientRect();
            const buttonCenterX = buttonRect.left + buttonRect.width / 2;
            const buttonCenterY = buttonRect.top + buttonRect.height / 2;

            floatingNumber.style.left = `${buttonCenterX}px`;
            floatingNumber.style.top = `${buttonCenterY}px`;

            document.body.appendChild(floatingNumber);

            // Remove the floating number after the animation ends
            setTimeout(() => {
                floatingNumber.remove();
            }, 1500); // Matches the animation duration
        }

        // Save game state to localStorage
        function saveGame() {
            const gameState = {
                score: score,
                timestamp: new Date().getTime()
            };
            localStorage.setItem('gameState', JSON.stringify(gameState));
            alert("Game saved!");
        }

        // Load game state from localStorage
        function loadGame() {
            const savedState = localStorage.getItem('gameState');
            if (savedState) {
                const gameState = JSON.parse(savedState);
                score = gameState.score;
                lastSavedTime = gameState.timestamp;
                updateScore();
                alert("Game loaded!");
            } else {
                alert("No saved game found.");
            }
        }

        // Leaderboard management
        function updateLeaderboard() {
            let leaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];

            // Check if the current score should be added to the leaderboard
            if (leaderboard.length < 5 || score > leaderboard[leaderboard.length - 1].score) {
                leaderboard.push({ score: score, timestamp: new Date().getTime() });
                leaderboard.sort((a, b) => b.score - a.score); // Sort by score in descending order

                // Limit to top 5 scores
                leaderboard = leaderboard.slice(0, 5);
                localStorage.setItem('leaderboard', JSON.stringify(leaderboard));
            }

            // Display leaderboard
            const leaderboardList = document.getElementById("leaderboardList");
            leaderboardList.innerHTML = ''; // Clear the leaderboard list

            leaderboard.forEach(entry => {
                const li = document.createElement("li");
                li.innerHTML = `<span>${entry.score}</span> - ${new Date(entry.timestamp).toLocaleTimeString()}`;
                leaderboardList.appendChild(li);
            });
        }

        // Update leaderboard every minute
        setInterval(updateLeaderboard, 60000); // Every minute (60000 ms)

        // Initialize the game and leaderboard
        function initGame() {
            // Update the score display from saved game state
            const savedState = localStorage.getItem('gameState');
            if (savedState) {
                const gameState = JSON.parse(savedState);
                score = gameState.score;
                updateScore();
            }

            // Update the leaderboard
            updateLeaderboard();
        }

        // Initialize the game on page load
        window.onload = initGame;

    </script>
</body>
</html>
